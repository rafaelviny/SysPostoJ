package py.com.concepto.sysposto.service.impl;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import py.com.concepto.sysposto.dao.AnexoDao;
import py.com.concepto.sysposto.model.entity.Anexo;
import py.com.concepto.sysposto.service.AnexoService;
import br.com.db1.myBatisPersistence.service.GenericMyBatisServiceImpl;


/**
 * Implementação da <code>Interface</code> que define os métodos de negócio Genéricos.
 * Define o nome do <code>Service</code> que será criado no <code>Spring</code> e
 * o modelo <code>Transacional</code>. <br/>
 *
 * Esta classe deve conter a implementação das regras de negócios necessária
 * para o <code>Model</code>.
 *
 * @author DB1 Informática - Generated by DB1 Eclipse Plugin
 *
 */
@Service(value = "anexoService")
@Transactional(rollbackFor = Exception.class)
public class AnexoServiceImpl extends GenericMyBatisServiceImpl<Anexo,Long> implements AnexoService {

	/**
	 * Propriedade que será injetada pelo <code>Spring</code>.
	 */
	@Autowired 
	private AnexoDao anexoDao;

	/**
	 * Retorna o valor do <code>Dao</code> injetado.
	 *
	 * @return Retorna o <code>Dao</code> que foi injetado pelo <code>Spring</code>.
	 */
	public AnexoDao getAnexoDao() {
		return anexoDao;
	} 

	/**
	 * Atribui uma nova intância do <code>Dao</code> através do recurso de
	 * <code>Autowire</code> e em seguida repassa o valor para a
	 * implementação genérica.
	 * 
	 * @param param
	 * 			Novo valor para o <code>Dao</code>.
	 */
	public void setAnexoDao(final AnexoDao param) {
		anexoDao = param;
		this.setGenericDao(anexoDao);
	}
	
	

}